# Use postgres/example user/password credentials
services:
  postgrest-api:
    image: postgrest/postgrest
    container_name: postgrest-api
    restart: always
    ports:
      - "3000:3000"
    environment:
      PGRST_DB_URI: postgres://authenticator:postgres@postgres:5432/portier
      # PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3000
      PGRST_DB_SCHEMAS: dbo
      PGRST_DB_ANON_ROLE: anon
      PGRST_SERVER_CORS: "*"
    depends_on:
      - postgres
  postgres:
    image: postgres
    container_name: postgres
    restart: always
    # set shared memory limit when using docker-compose
    # shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgresql_data:/var/lib/postgresql/data
    #command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200
    ports:
      - "5432:5432"
  meilisearch:
    image: getmeili/meilisearch:latest
    container_name: meilisearch
    restart: always
    environment:
      MEILI_MASTER_KEY: um_gjlsyTHkt3bCA4GH19boGGq_jdjiwvqaquutamL8
    ports:
      - "7700:7700"
  sync-service:
    build:
      context: .
      dockerfile: Dockerfile.sync
    container_name: sync-service
    depends_on:
      - postgres
      - meilisearch
    environment:
      POSTGRES_HOST: postgres
      MEILISEARCH_HOST: meilisearch
      MEILI_MASTER_KEY: um_gjlsyTHkt3bCA4GH19boGGq_jdjiwvqaquutamL8
  pmm-server:
    image: percona/pmm-server:2
    container_name: pmm-server
    restart: always
    volumes:
      - pmm-data:/srv
    ports:
      - "3001:80"
  swagger:
    image: swaggerapi/swagger-ui
    container_name: swagger
    restart: always
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      API_URL: http://localhost:3000
  krakend:
    image: devopsfaith/krakend:2
    container_name: krakend
    volumes:
      - ./krakend/krakend.json:/etc/krakend/krakend.json
    ports:
      - "80:8080"

volumes:
  postgresql_data:
  pmm-data:
  caddy_data:
  caddy_config:
